/*
Copyright 2017 SAP SE

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenstackSeedLister helps list OpenstackSeeds.
type OpenstackSeedLister interface {
	// List lists all OpenstackSeeds in the indexer.
	List(selector labels.Selector) (ret []*v1.OpenstackSeed, err error)
	// OpenstackSeeds returns an object that can list and get OpenstackSeeds.
	OpenstackSeeds(namespace string) OpenstackSeedNamespaceLister
	OpenstackSeedListerExpansion
}

// openstackSeedLister implements the OpenstackSeedLister interface.
type openstackSeedLister struct {
	indexer cache.Indexer
}

// NewOpenstackSeedLister returns a new OpenstackSeedLister.
func NewOpenstackSeedLister(indexer cache.Indexer) OpenstackSeedLister {
	return &openstackSeedLister{indexer: indexer}
}

// List lists all OpenstackSeeds in the indexer.
func (s *openstackSeedLister) List(selector labels.Selector) (ret []*v1.OpenstackSeed, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OpenstackSeed))
	})
	return ret, err
}

// OpenstackSeeds returns an object that can list and get OpenstackSeeds.
func (s *openstackSeedLister) OpenstackSeeds(namespace string) OpenstackSeedNamespaceLister {
	return openstackSeedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpenstackSeedNamespaceLister helps list and get OpenstackSeeds.
type OpenstackSeedNamespaceLister interface {
	// List lists all OpenstackSeeds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.OpenstackSeed, err error)
	// Get retrieves the OpenstackSeed from the indexer for a given namespace and name.
	Get(name string) (*v1.OpenstackSeed, error)
	OpenstackSeedNamespaceListerExpansion
}

// openstackSeedNamespaceLister implements the OpenstackSeedNamespaceLister
// interface.
type openstackSeedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpenstackSeeds in the indexer for a given namespace.
func (s openstackSeedNamespaceLister) List(selector labels.Selector) (ret []*v1.OpenstackSeed, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OpenstackSeed))
	})
	return ret, err
}

// Get retrieves the OpenstackSeed from the indexer for a given namespace and name.
func (s openstackSeedNamespaceLister) Get(name string) (*v1.OpenstackSeed, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("openstackseed"), name)
	}
	return obj.(*v1.OpenstackSeed), nil
}
