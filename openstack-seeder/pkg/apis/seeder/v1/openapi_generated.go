// +build !ignore_autogenerated

/*
Copyright 2017 SAP SE

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.AddressScopeSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A neutron address scope (see https://developer.openstack.org/api-ref/networking/v2/index.html  UNDOCUMENTED)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"ip_version": {
							SchemaProps: spec.SchemaProps{
								Description: "address scope name",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"shared": {
							SchemaProps: spec.SchemaProps{
								Description: "ip-version 4 or 6",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"subnet_pools": {
							SchemaProps: spec.SchemaProps{
								Description: "boolean flag to indicate if the address-scope is shared",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SubnetPoolSpec"),
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "ip_version"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SubnetPoolSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSQuotaSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "DNSQuotaSpec defines a designate project quota (see https://developer.openstack.org/api-ref/dns/?expanded=#quotas)",
					Properties: map[string]spec.Schema{
						"api_export_size": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"zones": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"zone_records": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"zone_recordsets": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"recordset_records": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSRecordsetSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "DNSRecordsetSpec defines a designate recordset (see https://developer.openstack.org/api-ref/dns/?expanded=#recordsets)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "DNS Name for the recordset",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ttl": {
							SchemaProps: spec.SchemaProps{
								Description: "They RRTYPE of the recordset.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "TTL (Time to Live) for the recordset.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"records": {
							SchemaProps: spec.SchemaProps{
								Description: "Description for this recordset",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "type"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSTSIGKeySpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "DNSTSIGKeySpec defines a designate tsig key (see https://developer.openstack.org/api-ref/dns/#tsigkey)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"algorithm": {
							SchemaProps: spec.SchemaProps{
								Description: "Name for this tsigkey",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"secret": {
							SchemaProps: spec.SchemaProps{
								Description: "The encryption algorithm for this tsigkey",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"scope": {
							SchemaProps: spec.SchemaProps{
								Description: "The actual key to be used",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"resource_id": {
							SchemaProps: spec.SchemaProps{
								Description: "scope for this tsigkey which can be either ZONE or POOL scope",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.Ec2CredSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Ec2CredSpec creats ec2 credentials for a user ((see https://developer.openstack.org/api-ref/identity/v3/index.html?expanded=#credentials)",
					Properties: map[string]spec.Schema{
						"user": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_domain": {
							SchemaProps: spec.SchemaProps{
								Description: "Openstack domain of user",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"access": {
							SchemaProps: spec.SchemaProps{
								Description: "The access id for the creds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"key": {
							SchemaProps: spec.SchemaProps{
								Description: "The key for the acces id",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSZoneSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "DNSZoneSpec defines a designate zone (see https://developer.openstack.org/api-ref/dns/?expanded=#zones)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "DNS Name for the zone",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"email": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of zone. PRIMARY is controlled by Designate, SECONDARY zones are slaved from another DNS Server. Defaults to PRIMARY",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ttl": {
							SchemaProps: spec.SchemaProps{
								Description: "e-mail for the zone. Used in SOA records for the zone",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "TTL (Time to Live) for the zone.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"recordsets": {
							SchemaProps: spec.SchemaProps{
								Description: "description of the zone",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSRecordsetSpec"),
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "type", "email"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSRecordsetSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DomainConfigSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A keystone domain configuation (see https://developer.openstack.org/api-ref/identity/v3/index.html#domain-configuration)",
					Properties: map[string]spec.Schema{
						"identity": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.IdentityConfigSpec"),
							},
						},
						"ldap": {
							SchemaProps: spec.SchemaProps{
								Description: "the identity driver configuration settings",
								Ref:         ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.LdapConfigSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.IdentityConfigSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.LdapConfigSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DomainSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A keystone domain (see https://developer.openstack.org/api-ref/identity/v3/index.html#domains)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "domain name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enabled": {
							SchemaProps: spec.SchemaProps{
								Description: "domain description",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"users": {
							SchemaProps: spec.SchemaProps{
								Description: "boolean flag to indicate if the domain is enabled",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.UserSpec"),
										},
									},
								},
							},
						},
						"groups": {
							SchemaProps: spec.SchemaProps{
								Description: "list of domain users",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.GroupSpec"),
										},
									},
								},
							},
						},
						"projects": {
							SchemaProps: spec.SchemaProps{
								Description: "list of domain groups",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ProjectSpec"),
										},
									},
								},
							},
						},
						"roles": {
							SchemaProps: spec.SchemaProps{
								Description: "list of domain projects",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RoleAssignmentSpec"),
										},
									},
								},
							},
						},
						"config": {
							SchemaProps: spec.SchemaProps{
								Description: "list of domain-role-assignments",
								Ref:         ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DomainConfigSpec"),
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DomainConfigSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.GroupSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ProjectSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RoleAssignmentSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.UserSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.EndpointSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A keystone service endpoint (see https://developer.openstack.org/api-ref/identity/v3/index.html#service-catalog-and-endpoints)",
					Properties: map[string]spec.Schema{
						"region": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"interface": {
							SchemaProps: spec.SchemaProps{
								Description: "region-id",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"url": {
							SchemaProps: spec.SchemaProps{
								Description: "interface type (usually public, admin, internal)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enabled": {
							SchemaProps: spec.SchemaProps{
								Description: "the endpoints URL",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"region", "interface", "url"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ExternalFixedIPsSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"subnet": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"subnet_id": {
							SchemaProps: spec.SchemaProps{
								Description: "subnet-name (subnet@project@domain)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ip_address": {
							SchemaProps: spec.SchemaProps{
								Description: "or subnet-id",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ExternalGatewayInfoSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"network": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"network_id": {
							SchemaProps: spec.SchemaProps{
								Description: "network-name (network@project@domain)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enable_snat": {
							SchemaProps: spec.SchemaProps{
								Description: "or network-id",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"external_fixed_ips": {
							SchemaProps: spec.SchemaProps{
								Description: "Enable Source NAT (SNAT) attribute. Default is true. To persist this attribute value, set the enable_snat_by_default option in the neutron.conf file. It is available when ext-gw-mode extension is enabled.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ExternalFixedIPsSpec"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ExternalFixedIPsSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.FlavorSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A nova flavor (see https://developer.openstack.org/api-ref/compute/#flavors)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"id": {
							SchemaProps: spec.SchemaProps{
								Description: "flavor name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ram": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"disk": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"vcpus": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"swap": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"rxtxfactor": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"number"},
								Format: "float",
							},
						},
						"is_public": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"disabled": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"ephemeral": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"extra_specs": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.GroupSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A keystone group (see https://developer.openstack.org/api-ref/identity/v3/#groups)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "group name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"users": {
							SchemaProps: spec.SchemaProps{
								Description: "description of the group",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"roles": {
							SchemaProps: spec.SchemaProps{
								Description: "a list of group members (user names)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RoleAssignmentSpec"),
										},
									},
								},
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RoleAssignmentSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.IdentityConfigSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"driver": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"driver"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.LdapConfigSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"url": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user": {
							SchemaProps: spec.SchemaProps{
								Description: "URL(s) for connecting to the LDAP server. Multiple LDAP URLs may be specified as a comma separated string. The first URL to successfully bind is used for the connection.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"password": {
							SchemaProps: spec.SchemaProps{
								Description: "The user name of the administrator bind DN to use when querying the LDAP server, if your LDAP server requires it.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"suffix": {
							SchemaProps: spec.SchemaProps{
								Description: "The password of the administrator bind DN to use when querying the LDAP server, if your LDAP server requires it.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"query_scope": {
							SchemaProps: spec.SchemaProps{
								Description: "The default LDAP server suffix to use, if a DN is not defined via either `[ldap] user_tree_dn` or `[ldap] group_tree_dn`.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"page_size": {
							SchemaProps: spec.SchemaProps{
								Description: "The search scope which defines how deep to search within the search base. A  value of `one` (representing `oneLevel` or `singleLevel`) indicates a search of objects immediately below to the base object, but does not include the base object itself. A value of `sub` (representing `subtree` or `wholeSubtree`) indicates a search of both the base object itself and the entire subtree below it.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"use_tls": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"tls_cacertfile": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"tls_cacertdir": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"tls_req_cert": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"use_pool": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"pool_size": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"pool_retry_max": {
							SchemaProps: spec.SchemaProps{
								Description: "The size of the LDAP connection pool",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"pool_retry_delay": {
							SchemaProps: spec.SchemaProps{
								Description: "The maximum number of times to attempt reconnecting to the LDAP server before aborting. A value of zero prevents retries.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"pool_connection_timeout": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of seconds to wait before attempting to reconnect to the LDAP server.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"pool_connection_lifetime": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"use_auth_pool": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"auth_pool_size": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"auth_pool_connection_lifetime": {
							SchemaProps: spec.SchemaProps{
								Description: "The size of the LDAP auth connection pool",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"alias_dereferencing": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"debug_level": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"user_tree_dn": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_filter": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_objectclass": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_id_attribute": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_name_attribute": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_description_attribute": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_mail_attribute": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_pass_attribute": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_enabled_attribute": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_enabled_mask": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"user_enabled_default": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_attribute_ignore": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"user_allow_create": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"user_allow_update": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"user_allow_delete": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"group_tree_dn": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"group_filter": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"group_objectclass": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"group_id_attribute": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"group_name_attribute": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"group_description_attribute": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"group_member_attribute": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"group_members_are_ids": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"group_attribute_ignore": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"group_allow_create": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"group_allow_update": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"group_allow_delete": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
					},
					Required: []string{"url", "user", "password"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.NetworkQuotaSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A neutron project quota (see https://developer.openstack.org/api-ref/networking/v2/index.html#quotas-extension-quotas)",
					Properties: map[string]spec.Schema{
						"floatingip": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"network": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of floating IP addresses allowed for each project. A value of -1 means no limit.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"port": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of networks allowed for each project. A value of -1 means no limit.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"rbac_policy": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of ports allowed for each project. A value of -1 means no limit.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"router": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of role-based access control (RBAC) policies for each project. A value of -1 means no limit.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"security_group": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of routers allowed for each project. A value of -1 means no limit.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"security_group_rule": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of security groups allowed for each project. A value of -1 means no limit.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"subnet": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of security group rules allowed for each project. A value of -1 means no limit.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"subnetpool": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of subnets allowed for each project. A value of -1 means no limit.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"healthmonitor": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of subnet pools allowed for each project. A value of -1 means no limit.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"l7policy": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"listener": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"loadbalancer": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.NetworkSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A neutron network (see https://developer.openstack.org/api-ref/networking/v2/index.html#networks)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"admin_state_up": {
							SchemaProps: spec.SchemaProps{
								Description: "network name",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"port_security_enabled": {
							SchemaProps: spec.SchemaProps{
								Description: "The administrative state of the network, which is up (true) or down (false).",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"provider_network_type": {
							SchemaProps: spec.SchemaProps{
								Description: "The port security status of the network. Valid values are enabled (true) and disabled (false). This value is used as the default value of port_security_enabled field of a newly created port.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"provider_physical_network": {
							SchemaProps: spec.SchemaProps{
								Description: "The type of physical network that this network should be mapped to. For example, flat, vlan, vxlan, or gre. Valid values depend on a networking back-end.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"provider_segmentation_id": {
							SchemaProps: spec.SchemaProps{
								Description: "The physical network where this network should be implemented. The Networking API v2.0 does not provide a way to list available physical networks. For example, the Open vSwitch plug-in configuration file defines a symbolic name that maps to specific bridges on each compute host.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"qos_policy_id": {
							SchemaProps: spec.SchemaProps{
								Description: "The ID of the isolated segment on the physical network. The network_type attribute defines the segmentation model. For example, if the network_type value is vlan, this ID is a vlan identifier. If the network_type value is gre, this ID is a gre key.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"router_external": {
							SchemaProps: spec.SchemaProps{
								Description: "The ID of the QoS policy.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"shared": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicates whether this network can provide floating IPs via a router.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"vlan_transparent": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicates whether this network is shared across all projects. By default, only administrative users can change this value.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicates the VLAN transparency mode of the network, which is VLAN transparent (true) or not VLAN transparent (false).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"subnets": {
							SchemaProps: spec.SchemaProps{
								Description: "description of the network",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SubnetSpec"),
										},
									},
								},
							},
						},
						"tags": {
							SchemaProps: spec.SchemaProps{
								Description: "List of subnets",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SubnetSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.OpenstackSeed": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.OpenstackSeedSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.OpenstackSeedStatus"),
							},
						},
					},
					Required: []string{"spec"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.OpenstackSeedSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.OpenstackSeedStatus"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.OpenstackSeedSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"requires": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"roles": {
							SchemaProps: spec.SchemaProps{
								Description: "list of required specs that need to be resolved before the current one",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"regions": {
							SchemaProps: spec.SchemaProps{
								Description: "list of keystone roles",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RegionSpec"),
										},
									},
								},
							},
						},
						"services": {
							SchemaProps: spec.SchemaProps{
								Description: "list keystone regions",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ServiceSpec"),
										},
									},
								},
							},
						},
						"flavors": {
							SchemaProps: spec.SchemaProps{
								Description: "list keystone services and their endpoints",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.FlavorSpec"),
										},
									},
								},
							},
						},
						"share_types": {
							SchemaProps: spec.SchemaProps{
								Description: "list of nova flavors",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ShareTypeSpec"),
										},
									},
								},
							},
						},
						"resource_classes": {
							SchemaProps: spec.SchemaProps{
								Description: "list of Manila share types",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"domains": {
							SchemaProps: spec.SchemaProps{
								Description: "list of resource classes for the placement service (currently still part of nova)",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DomainSpec"),
										},
									},
								},
							},
						},
						"rbac_policies": {
							SchemaProps: spec.SchemaProps{
								Description: "list keystone domains with their configuration, users, groups, projects, etc.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RBACPolicySpec"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DomainSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.FlavorSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RBACPolicySpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RegionSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ServiceSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ShareTypeSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.OpenstackSeedStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"processed": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"merged": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"boolean"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"processed", "merged"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ProjectEndpointSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A project endpoint filter (see https://developer.openstack.org/api-ref/identity/v3-ext/#os-ep-filter-api)",
					Properties: map[string]spec.Schema{
						"region": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"service": {
							SchemaProps: spec.SchemaProps{
								Description: "region-id",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"region", "service"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ProjectSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A keystone project (see https://developer.openstack.org/api-ref/identity/v3/index.html#projects)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "project name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enabled": {
							SchemaProps: spec.SchemaProps{
								Description: "project description",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"parent": {
							SchemaProps: spec.SchemaProps{
								Description: "boolean flag to indicate if the project is enabled",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"is_domain": {
							SchemaProps: spec.SchemaProps{
								Description: "(optional) parent project name",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"endpoints": {
							SchemaProps: spec.SchemaProps{
								Description: "is the project actually a domain?",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ProjectEndpointSpec"),
										},
									},
								},
							},
						},
						"roles": {
							SchemaProps: spec.SchemaProps{
								Description: "list of project endpoint filters",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RoleAssignmentSpec"),
										},
									},
								},
							},
						},
						"flavors": {
							SchemaProps: spec.SchemaProps{
								Description: "list of project-role-assignments",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"share_types": {
							SchemaProps: spec.SchemaProps{
								Description: "list of nova flavor-id's",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"address_scopes": {
							SchemaProps: spec.SchemaProps{
								Description: "list of manila share types",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.AddressScopeSpec"),
										},
									},
								},
							},
						},
						"subnet_pools": {
							SchemaProps: spec.SchemaProps{
								Description: "list of neutron address-scopes",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SubnetPoolSpec"),
										},
									},
								},
							},
						},
						"network_quota": {
							SchemaProps: spec.SchemaProps{
								Description: "list of neutron subnet-pools",
								Ref:         ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.NetworkQuotaSpec"),
							},
						},
						"networks": {
							SchemaProps: spec.SchemaProps{
								Description: "neutron quota",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.NetworkSpec"),
										},
									},
								},
							},
						},
						"routers": {
							SchemaProps: spec.SchemaProps{
								Description: "neutron networks",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RouterSpec"),
										},
									},
								},
							},
						},
						"swift": {
							SchemaProps: spec.SchemaProps{
								Description: "neutron routers",
								Ref:         ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SwiftAccountSpec"),
							},
						},
						"dns_quota": {
							SchemaProps: spec.SchemaProps{
								Description: "swift account",
								Ref:         ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSQuotaSpec"),
							},
						},
						"dns_zones": {
							SchemaProps: spec.SchemaProps{
								Description: "designate quota",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSZoneSpec"),
										},
									},
								},
							},
						},
						"dns_tsigkeys": {
							SchemaProps: spec.SchemaProps{
								Description: "designate zones, recordsets",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSTSIGKeySpec"),
										},
									},
								},
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.AddressScopeSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSQuotaSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSTSIGKeySpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.DNSZoneSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.NetworkQuotaSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.NetworkSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ProjectEndpointSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RoleAssignmentSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RouterSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SubnetPoolSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SwiftAccountSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RBACPolicySpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A neutron RBAC policy (see https://developer.openstack.org/api-ref/network/v2/index.html#rbac-policies)",
					Properties: map[string]spec.Schema{
						"object_type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"object_name": {
							SchemaProps: spec.SchemaProps{
								Description: "The type of the object that the RBAC policy affects. Types include qos-policy or network.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"action": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the object (like networkname@project@domain) or",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"target_tenant_name": {
							SchemaProps: spec.SchemaProps{
								Description: "Action for the RBAC policy which is access_as_external or access_as_shared.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"object_type", "object_name", "action", "target_tenant_name"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RegionSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A keystone region (see https://developer.openstack.org/api-ref/identity/v3/index.html#regions)",
					Properties: map[string]spec.Schema{
						"id": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "the region id",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"parent_region": {
							SchemaProps: spec.SchemaProps{
								Description: "the regions description",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"id"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RoleAssignmentSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A keystone role assignment (see https://developer.openstack.org/api-ref/identity/v3/#roles).\n\nRole assignments can be assigned to users, groups, domain and projects.\n\nA role assignment always links 3 entities: user or group to project or domain with a specified role.\n\nTo support cross domain entity referals, the user-, group- or project-names support a name@domain notation.",
					Properties: map[string]spec.Schema{
						"role": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"domain": {
							SchemaProps: spec.SchemaProps{
								Description: "the role name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"project": {
							SchemaProps: spec.SchemaProps{
								Description: "domain-role-assigment: the domain name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"project_id": {
							SchemaProps: spec.SchemaProps{
								Description: "project-role-assignment: project_name@domain_name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"group": {
							SchemaProps: spec.SchemaProps{
								Description: "project-role assignment: project id",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"user": {
							SchemaProps: spec.SchemaProps{
								Description: "group name (for project/domain group-role-assignment)",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"inherited": {
							SchemaProps: spec.SchemaProps{
								Description: "user name (for project/domain user-role-assignment)",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
					},
					Required: []string{"role"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RouterPortSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"port_id": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"subnet": {
							SchemaProps: spec.SchemaProps{
								Description: "The ID of the port. One of subnet_id or port_id must be specified.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"subnet_id": {
							SchemaProps: spec.SchemaProps{
								Description: "Subnet-name (subnet-name or subnet-name@project@domain). Looks up a subnet-id by name.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RouterRouteSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"destination": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"nexthop": {
							SchemaProps: spec.SchemaProps{
								Description: "Route destination",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RouterSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A neutron router (see https://developer.openstack.org/api-ref/networking/v2/index.html#routers)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"admin_state_up": {
							SchemaProps: spec.SchemaProps{
								Description: "router name",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "The administrative state of the router, which is up (true) or down (false).",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"external_gateway_info": {
							SchemaProps: spec.SchemaProps{
								Description: "description of the router",
								Ref:         ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ExternalGatewayInfoSpec"),
							},
						},
						"distributed": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"ha": {
							SchemaProps: spec.SchemaProps{
								Description: "true indicates a distributed router. It is available when dvr extension is enabled.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"flavor_id": {
							SchemaProps: spec.SchemaProps{
								Description: "true indicates a highly-available router. It is available when l3-ha extension is enabled.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"service_type_id": {
							SchemaProps: spec.SchemaProps{
								Description: "The ID of the flavor associated with the router",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"interfaces": {
							SchemaProps: spec.SchemaProps{
								Description: "The ID of the service type associated with the router.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RouterPortSpec"),
										},
									},
								},
							},
						},
						"routes": {
							SchemaProps: spec.SchemaProps{
								Description: "Router internal interface specs. This means a specified subnet is attached to a router as an internal router interface.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RouterRouteSpec"),
										},
									},
								},
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ExternalGatewayInfoSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RouterPortSpec", "github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RouterRouteSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ServiceSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A keystone service (see https://developer.openstack.org/api-ref/identity/v3/index.html#service-catalog-and-endpoints)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "service name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "service type",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enabled": {
							SchemaProps: spec.SchemaProps{
								Description: "description of the service",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"endpoints": {
							SchemaProps: spec.SchemaProps{
								Description: "boolean flag to indicate if the service is enabled",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.EndpointSpec"),
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "type"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.EndpointSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ShareTypeSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A Manila Share Type (see https://developer.openstack.org/api-ref/shared-file-system/?expanded=create-share-type-detail#share-types )",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "share type name",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"is_public": {
							SchemaProps: spec.SchemaProps{
								Description: "description",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"specs": {
							SchemaProps: spec.SchemaProps{
								Description: "share type is public or private; deafult is public",
								Ref:         ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ShareTypeSpecifiedSpecs"),
							},
						},
						"extra_specs": {
							SchemaProps: spec.SchemaProps{
								Description: "specs that are typed",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"name", "specs"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.ShareTypeSpecifiedSpecs"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SubnetPoolSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A neutron subnet pool (see https://developer.openstack.org/api-ref/networking/v2/index.html#subnet-pools)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"default_quota": {
							SchemaProps: spec.SchemaProps{
								Description: "subnet-pool name",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"prefixes": {
							SchemaProps: spec.SchemaProps{
								Description: "A per-project quota on the prefix space that can be allocated from the subnet pool for project subnets.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"min_prefixlen": {
							SchemaProps: spec.SchemaProps{
								Description: "A list of subnet prefixes to assign to the subnet pool",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"shared": {
							SchemaProps: spec.SchemaProps{
								Description: "The smallest prefix that can be allocated from a subnet pool.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"default_prefixlen": {
							SchemaProps: spec.SchemaProps{
								Description: "Admin-only. Indicates whether this network is shared across all projects.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"max_prefixlen": {
							SchemaProps: spec.SchemaProps{
								Description: "The size of the prefix to allocate when the cidr or prefixlen attributes are omitted when you create the subnet. Default is min_prefixlen.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"address_scope_id": {
							SchemaProps: spec.SchemaProps{
								Description: "The maximum prefix size that can be allocated from the subnet pool. For IPv4 subnet pools, default is 32. For IPv6 subnet pools, default is 128.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"is_default": {
							SchemaProps: spec.SchemaProps{
								Description: "An address scope to assign to the subnet pool.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
					Required: []string{"name", "prefixes"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SubnetSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A neutron subnet (see https://developer.openstack.org/api-ref/networking/v2/index.html#subnets)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"enable_dhcp": {
							SchemaProps: spec.SchemaProps{
								Description: "network name",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"dns_name_servers": {
							SchemaProps: spec.SchemaProps{
								Description: "Indicates whether dhcp is enabled or disabled for the subnet. Default is true.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"allocation_pools": {
							SchemaProps: spec.SchemaProps{
								Description: "List of dns name servers associated with the subnet.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"host_routes": {
							SchemaProps: spec.SchemaProps{
								Description: "Allocation pools with start and end IP addresses for this subnet. If allocation_pools are not specified, OpenStack Networking automatically allocates pools for covering all IP addresses in the CIDR, excluding the address reserved for the subnet gateway by default.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"ip_version": {
							SchemaProps: spec.SchemaProps{
								Description: "Additional routes for the subnet. A list of dictionaries with destination and nexthop parameters.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"gateway_ip": {
							SchemaProps: spec.SchemaProps{
								Description: "ip-version 4 or 6",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"cidr": {
							SchemaProps: spec.SchemaProps{
								Description: "Gateway IP of this subnet. If the value is null that implies no gateway is associated with the subnet. If the gateway_ip is not specified, OpenStack Networking allocates an address from the CIDR for the gateway for the subnet by default.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"prefixlen": {
							SchemaProps: spec.SchemaProps{
								Description: "The CIDR of the subnet.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "The prefix length to use for subnet allocation from a subnet pool. If not specified, the default_prefixlen value of the subnet pool will be used.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipv6_address_mode": {
							SchemaProps: spec.SchemaProps{
								Description: "description of the network",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ipv6_ra_mode": {
							SchemaProps: spec.SchemaProps{
								Description: "The IPv6 address modes specifies mechanisms for assigning IP addresses. Value is slaac, dhcpv6-stateful, dhcpv6-stateless.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"segment_id": {
							SchemaProps: spec.SchemaProps{
								Description: "The IPv6 router advertisement specifies whether the networking service should transmit ICMPv6 packets, for a subnet. Value is slaac, dhcpv6-stateful, dhcpv6-stateless.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"subnetpool_id": {
							SchemaProps: spec.SchemaProps{
								Description: "The ID of a network segment the subnet is associated with. It is available when segment extension is enabled.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"subnetpool": {
							SchemaProps: spec.SchemaProps{
								Description: "Subnet-pool ID",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"tags": {
							SchemaProps: spec.SchemaProps{
								Description: "Subnet-pool name within teh subnets project",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SwiftAccountSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SwiftAccountSpec defines a swift account",
					Properties: map[string]spec.Schema{
						"enabled": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"containers": {
							SchemaProps: spec.SchemaProps{
								Description: "Create a swift account",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SwiftContainerSpec"),
										},
									},
								},
							},
						},
					},
					Required: []string{"enabled"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SwiftContainerSpec"},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.SwiftContainerSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SwiftContainerSpec defines a swift container",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Container name",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.UserSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "A keystone user (see https://developer.openstack.org/api-ref/identity/v3/#users)",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "username",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"password": {
							SchemaProps: spec.SchemaProps{
								Description: "description of the user",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"enabled": {
							SchemaProps: spec.SchemaProps{
								Description: "password of the user (only evaluated on user creation)",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"roles": {
							SchemaProps: spec.SchemaProps{
								Description: "boolean flag to indicate if the user is enabled",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RoleAssignmentSpec"),
										},
									},
								},
							},
						},
						"default_project": {
							SchemaProps: spec.SchemaProps{
								Description: "list of the users role-assignments",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name"},
				},
			},
			Dependencies: []string{
				"github.com/sapcc/kubernetes-operators/openstack-seeder/pkg/apis/seeder/v1.RoleAssignmentSpec"},
		},
	}
}
