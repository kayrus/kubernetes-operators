/*******************************************************************************
*
* Copyright 2019 SAP SE
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You should have received a copy of the License along with this
* program. If not, you may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*******************************************************************************/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	discostablesapccv1 "github.com/sapcc/kubernetes-operators/disco/pkg/apis/disco.stable.sap.cc/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDiscoRecords implements DiscoRecordInterface
type FakeDiscoRecords struct {
	Fake *FakeDiscoV1
	ns   string
}

var discorecordsResource = schema.GroupVersionResource{Group: "disco.stable.sap.cc", Version: "v1", Resource: "discorecords"}

var discorecordsKind = schema.GroupVersionKind{Group: "disco.stable.sap.cc", Version: "v1", Kind: "DiscoRecord"}

// Get takes name of the discoRecord, and returns the corresponding discoRecord object, and an error if there is any.
func (c *FakeDiscoRecords) Get(name string, options v1.GetOptions) (result *discostablesapccv1.DiscoRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(discorecordsResource, c.ns, name), &discostablesapccv1.DiscoRecord{})

	if obj == nil {
		return nil, err
	}
	return obj.(*discostablesapccv1.DiscoRecord), err
}

// List takes label and field selectors, and returns the list of DiscoRecords that match those selectors.
func (c *FakeDiscoRecords) List(opts v1.ListOptions) (result *discostablesapccv1.DiscoRecordList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(discorecordsResource, discorecordsKind, c.ns, opts), &discostablesapccv1.DiscoRecordList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &discostablesapccv1.DiscoRecordList{ListMeta: obj.(*discostablesapccv1.DiscoRecordList).ListMeta}
	for _, item := range obj.(*discostablesapccv1.DiscoRecordList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested discoRecords.
func (c *FakeDiscoRecords) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(discorecordsResource, c.ns, opts))

}

// Create takes the representation of a discoRecord and creates it.  Returns the server's representation of the discoRecord, and an error, if there is any.
func (c *FakeDiscoRecords) Create(discoRecord *discostablesapccv1.DiscoRecord) (result *discostablesapccv1.DiscoRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(discorecordsResource, c.ns, discoRecord), &discostablesapccv1.DiscoRecord{})

	if obj == nil {
		return nil, err
	}
	return obj.(*discostablesapccv1.DiscoRecord), err
}

// Update takes the representation of a discoRecord and updates it. Returns the server's representation of the discoRecord, and an error, if there is any.
func (c *FakeDiscoRecords) Update(discoRecord *discostablesapccv1.DiscoRecord) (result *discostablesapccv1.DiscoRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(discorecordsResource, c.ns, discoRecord), &discostablesapccv1.DiscoRecord{})

	if obj == nil {
		return nil, err
	}
	return obj.(*discostablesapccv1.DiscoRecord), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeDiscoRecords) UpdateStatus(discoRecord *discostablesapccv1.DiscoRecord) (*discostablesapccv1.DiscoRecord, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(discorecordsResource, "status", c.ns, discoRecord), &discostablesapccv1.DiscoRecord{})

	if obj == nil {
		return nil, err
	}
	return obj.(*discostablesapccv1.DiscoRecord), err
}

// Delete takes name of the discoRecord and deletes it. Returns an error if one occurs.
func (c *FakeDiscoRecords) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(discorecordsResource, c.ns, name), &discostablesapccv1.DiscoRecord{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDiscoRecords) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(discorecordsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &discostablesapccv1.DiscoRecordList{})
	return err
}

// Patch applies the patch and returns the patched discoRecord.
func (c *FakeDiscoRecords) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *discostablesapccv1.DiscoRecord, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(discorecordsResource, c.ns, name, pt, data, subresources...), &discostablesapccv1.DiscoRecord{})

	if obj == nil {
		return nil, err
	}
	return obj.(*discostablesapccv1.DiscoRecord), err
}
