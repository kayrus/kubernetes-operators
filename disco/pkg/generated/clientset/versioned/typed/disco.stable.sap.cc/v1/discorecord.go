/*******************************************************************************
*
* Copyright 2019 SAP SE
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You should have received a copy of the License along with this
* program. If not, you may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*******************************************************************************/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/sapcc/kubernetes-operators/disco/pkg/apis/disco/v1"
	scheme "github.com/sapcc/kubernetes-operators/disco/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// DiscoRecordsGetter has a method to return a DiscoRecordInterface.
// A group's client should implement this interface.
type DiscoRecordsGetter interface {
	DiscoRecords(namespace string) DiscoRecordInterface
}

// DiscoRecordInterface has methods to work with DiscoRecord resources.
type DiscoRecordInterface interface {
	Create(*v1.DiscoRecord) (*v1.DiscoRecord, error)
	Update(*v1.DiscoRecord) (*v1.DiscoRecord, error)
	UpdateStatus(*v1.DiscoRecord) (*v1.DiscoRecord, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.DiscoRecord, error)
	List(opts metav1.ListOptions) (*v1.DiscoRecordList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.DiscoRecord, err error)
	DiscoRecordExpansion
}

// discoRecords implements DiscoRecordInterface
type discoRecords struct {
	client rest.Interface
	ns     string
}

// newDiscoRecords returns a DiscoRecords
func newDiscoRecords(c *DiscoV1Client, namespace string) *discoRecords {
	return &discoRecords{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the discoRecord, and returns the corresponding discoRecord object, and an error if there is any.
func (c *discoRecords) Get(name string, options metav1.GetOptions) (result *v1.DiscoRecord, err error) {
	result = &v1.DiscoRecord{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("discorecords").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of DiscoRecords that match those selectors.
func (c *discoRecords) List(opts metav1.ListOptions) (result *v1.DiscoRecordList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.DiscoRecordList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("discorecords").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested discoRecords.
func (c *discoRecords) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("discorecords").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a discoRecord and creates it.  Returns the server's representation of the discoRecord, and an error, if there is any.
func (c *discoRecords) Create(discoRecord *v1.DiscoRecord) (result *v1.DiscoRecord, err error) {
	result = &v1.DiscoRecord{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("discorecords").
		Body(discoRecord).
		Do().
		Into(result)
	return
}

// Update takes the representation of a discoRecord and updates it. Returns the server's representation of the discoRecord, and an error, if there is any.
func (c *discoRecords) Update(discoRecord *v1.DiscoRecord) (result *v1.DiscoRecord, err error) {
	result = &v1.DiscoRecord{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("discorecords").
		Name(discoRecord.Name).
		Body(discoRecord).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *discoRecords) UpdateStatus(discoRecord *v1.DiscoRecord) (result *v1.DiscoRecord, err error) {
	result = &v1.DiscoRecord{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("discorecords").
		Name(discoRecord.Name).
		SubResource("status").
		Body(discoRecord).
		Do().
		Into(result)
	return
}

// Delete takes name of the discoRecord and deletes it. Returns an error if one occurs.
func (c *discoRecords) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("discorecords").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *discoRecords) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("discorecords").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched discoRecord.
func (c *discoRecords) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.DiscoRecord, err error) {
	result = &v1.DiscoRecord{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("discorecords").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
