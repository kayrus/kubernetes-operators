/*******************************************************************************
*
* Copyright 2019 SAP SE
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You should have received a copy of the License along with this
* program. If not, you may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*******************************************************************************/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	discov1 "github.com/sapcc/kubernetes-operators/disco/pkg/apis/disco/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeRecords implements RecordInterface
type FakeRecords struct {
	Fake *FakeDiscoV1
	ns   string
}

var recordsResource = schema.GroupVersionResource{Group: "disco.stable.sap.cc", Version: "v1", Resource: "records"}

var recordsKind = schema.GroupVersionKind{Group: "disco.stable.sap.cc", Version: "v1", Kind: "Record"}

// Get takes name of the record, and returns the corresponding record object, and an error if there is any.
func (c *FakeRecords) Get(name string, options v1.GetOptions) (result *discov1.Record, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(recordsResource, c.ns, name), &discov1.Record{})

	if obj == nil {
		return nil, err
	}
	return obj.(*discov1.Record), err
}

// List takes label and field selectors, and returns the list of Records that match those selectors.
func (c *FakeRecords) List(opts v1.ListOptions) (result *discov1.RecordList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(recordsResource, recordsKind, c.ns, opts), &discov1.RecordList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &discov1.RecordList{ListMeta: obj.(*discov1.RecordList).ListMeta}
	for _, item := range obj.(*discov1.RecordList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested records.
func (c *FakeRecords) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(recordsResource, c.ns, opts))

}

// Create takes the representation of a record and creates it.  Returns the server's representation of the record, and an error, if there is any.
func (c *FakeRecords) Create(record *discov1.Record) (result *discov1.Record, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(recordsResource, c.ns, record), &discov1.Record{})

	if obj == nil {
		return nil, err
	}
	return obj.(*discov1.Record), err
}

// Update takes the representation of a record and updates it. Returns the server's representation of the record, and an error, if there is any.
func (c *FakeRecords) Update(record *discov1.Record) (result *discov1.Record, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(recordsResource, c.ns, record), &discov1.Record{})

	if obj == nil {
		return nil, err
	}
	return obj.(*discov1.Record), err
}

// Delete takes name of the record and deletes it. Returns an error if one occurs.
func (c *FakeRecords) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(recordsResource, c.ns, name), &discov1.Record{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRecords) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(recordsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &discov1.RecordList{})
	return err
}

// Patch applies the patch and returns the patched record.
func (c *FakeRecords) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *discov1.Record, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(recordsResource, c.ns, name, pt, data, subresources...), &discov1.Record{})

	if obj == nil {
		return nil, err
	}
	return obj.(*discov1.Record), err
}
